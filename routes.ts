import {
  Router,
  RouterContext,
} from "https://deno.land/x/oak@v6.0.1/router.ts";
import { v4 } from "https://deno.land/std/uuid/mod.ts";
import { RequestError } from "./utils/exceptions.ts";
import { IDinosaur as Dinosaur, DB, dinosaurSchema } from "./model.ts";

const router = new Router();

router.get("/dinosaurs", ({ response }) => {
  response.body = [...DB.values()];
});

router.post("/dinosaurs", async (ctx: RouterContext) => {
  const data = await ctx.request.body();
  if (data.type !== "json") throw new RequestError(400, "Invalid body");

  await dinosaurSchema.validate(await data.value).then((dino: Dinosaur) => {
    dino.id = v4.generate();
    DB.set(dino.id, dino);
    ctx.response.status = 201;
    ctx.response.body = dino;
  }).catch((err: RequestError) => {
    // Error message generated by yup
    err.status = 422;
    throw err;
  });
});

router.delete("/dinosaurs/:id", (ctx: RouterContext) => {
  const id = <string> ctx.params.id;
  if (!DB.has(id)) throw new RequestError(404, "Not found");

  DB.delete(id);
  ctx.response.status = 204;
});

router.put("/dinosaurs/:id", async (ctx: RouterContext) => {
  const id = <string> ctx.params.id;
  if (!DB.has(id)) throw new RequestError(404, "Not found");

  const data = await ctx.request.body();
  if (data.type !== "json") throw new RequestError(400, "Invalid body");

  await dinosaurSchema.validate(await data.value).then((dino: Dinosaur) => {
    dino.id = id;
    DB.set(id, dino);
    ctx.response.status = 204;
  }).catch((err: RequestError) => {
    // Error message generated by yup
    err.status = 422;
    throw err;
  });
});

export default router;
